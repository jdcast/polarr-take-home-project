"""
The idea is to start sampling in the middle of the bit array and proceed in one direction until the end.
Upon reaching the end, reverse and sample twice the bit next to the end bit that was just visited.
Proceed this way until the 1-bit is found.
"""


# bit indicies: [0, 1, 2, 3, 4]

LEFT = 0
RIGHT = 1

test_direction = RIGHT
current_bit = 2
last_bit = 2
test_twice = false

main:
	while(true):
        found = test(current_bit)
        if found:
            return true

        if current_bit == 0 or current_bit == 4: # reverse
            test_direction = 1 - test_direction
            test_twice = true # signal that we need to stop and test next bit twice, i.e. bits 1 or 3

            last_bit = current_bit
            if test_direction == RIGHT:
                current_bit += 1
            else:
                current_bit -= 1
        else if (last_bit == 1 or last_bit == 3) and test_twice: # stop and test this bit twice
            test_twice = false

            if test_direction == RIGHT:
                current_bit += 1
            else:
                current_bit -= 1
		else:
			last_bit = current_bit
			if not test_twice:
	            if test_direction == RIGHT:
	                current_bit += 1
	            else:
	                current_bit -= 1


